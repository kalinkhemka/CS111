Name: Kalin Khemka
UCLA ID: 304336969

Collaborators: None

-------------------------------------------------------------------------------

Response to Exercise 1:
If we replaced run(current) with schedulue(), the correct value of the sys_getpid() call should be
returned most of the time. When the interrupt occurs, and schedule() is run, another process is 
created, but then this new process has its own stack and its own set of registers. This context-switch
allows for the original process to maintain its own registers and pid value. Thus, when the other processes
called by schedule are finished running and the original process is run once again, it should return
the correct pid. There is a chance, however, that it will not always return the correct pid because
in weensyos, there is no memory isolation between the kernel space and application space. Therefore,
a different process could potentially overwrite the data of the original process.

-------------------------------------------------------------------------------

Response to Exercise 3:
Added another field to the process descriptor structure called "p_waiting" which was of type int.
This field was then used to store the pid of the process the current process was waiting on. I changed
the code in INT_SYS_WAIT and INT_SYS_EXIT so that I could put processes to sleep and wake them up.

-------------------------------------------------------------------------------

Response to Exercise 4:
Setting the p_state of the current process to P_EMPTY in INT_SYS_EXIT solves the problem of cleaning up old processes.
Also set the p_state of the current process to P_EMPTY if it was P_ZOMBIE in INT_SYS_WAIT

-------------------------------------------------------------------------------

Anything else you'd like us to know:
For some reason, when I ran whatever code I had up till this point, the program worked fine.
But once I added the kill function in Extra Credit 7, the last two lines of output for the processes
were red, which is something that was warned about in the spec for the project.


Extra credit exercises:

-------------------------------------------------------------------------------
Response to Exercise 5:
Tested this by putting it in the start function in mpos-app.c and the output was 11.


void start(void) {
        int x = 0;  /* note that local variable x lives on the stack */
        /* YOUR CODE HERE */
	volatile int *i = &x;
	int *volatile j = &x;

        pid_t p = sys_fork();
        if (p == 0)
	{
                /* YOUR CODE HERE */
		i = &x;
		j = &x;
		*i = 1;
		*j = 1;
	}
        else if (p > 0)
                sys_wait(p); // assume blocking implementation
        app_printf("%d", x);
        sys_exit(0);
}

-------------------------------------------------------------------------------
Response to Exercise 6:
Could not figure out how we were supposed to implement this function into the actual code. But this is
the code I have written for creating new threads.

MPOS.H
#define INT_SYS_NEWTHREAD	53

MPOS-APP.C
static inline pid_t
sys_newthread(void (*start_function)(void))
{
	pid_t result;
	asm volatile("int %1\n"
		     : "=a" (result)
		     : "i" (INT_SYS_NEWTHREAD), "a" (start_function)
		     : "cc", "memory");
	return result;
}

MPOS-KERN.C
case INT_SYS_NEWTHREAD:
		// The 'sys_newthread' system call will create a new process as a new thread.				
		current->p_registers.reg_eax = do_newthread(current,(void(*)(void))current->p_registers.reg_eax);
		run(current);

MPOS-KERN.C
static pid_t
do_newthread(process_t *parent, void (*start_function)(void))
{
	pid_t pid = -1;
	pid_t i;
	for (i  = 0; i < NPROCS; i++)
	{
		if (proc_array[i].p_state == P_EMPTY)
		{
			pid = i;
			break;
		}
	}
	if (pid == -1)
		return pid;
	
	proc_array[pid].p_state = P_RUNNABLE;
	proc_array[pid].p_registers = parent->p_registers;
	proc_array[pid].p_registers.reg_eip = (int) start_function;
	proc_array[pid].p_registers.reg_eax = 0;

	return pid;
}

-------------------------------------------------------------------------------
Response to Exercise 7:

Wrote the following to kill a process. The code for the switch statement is very similar to the 
code in INT_SYS_EXIT except that kills any process that isn't a zombie and sets its exit value
to -1. I also put a #define and #ifdef #endif for testing the process of outputting only even numbered
processes. Another issue that came up with this was that the last 2 processes are always red. I tried
to figure out why this was the case but I could not come up with an answer. The program without trying to
use kill works fine and the last 2 lines of output are not the same color.

MPOS.H
#define INT_SYS_KILL		54

MPOS-APP.C
static inline pid_t
sys_kill(pid_t pid)
{
	int retval;
	asm volatile("int %1\n"
		     : "=a" (retval)
		     : "i" (INT_SYS_KILL),
		       "a" (pid)
		     : "cc", "memory");
	return retval;
}

MPOS-KERN.C
case INT_SYS_KILL: {
		// The 'sys_kill' system call will kill a targeted process.				
	
		pid_t p = current->p_registers.reg_eax;	
		if (p <= 0 || p >= NPROCS || p == current->p_pid
		    || proc_array[p].p_state == P_EMPTY)
			current->p_registers.reg_eax = -1;
		else if (proc_array[p].p_state != P_ZOMBIE)
		{
			proc_array[p].p_state = P_ZOMBIE;
			proc_array[p].p_exit_status = -1;
			current->p_registers.reg_eax = 0;
		}
		else
			current->p_registers.reg_eax = 0;

		run(current);

	}

MPOS-APP2.C
#define Ex7

#ifdef Ex7
if ((sys_getpid() % 2) == 0 && NPROCS > 2)
{
	pid_t pid;
	for (pid = 3; pid < NPROCS; pid+=2)
		sys_kill(pid);
}
#endif

-------------------------------------------------------------------------------


